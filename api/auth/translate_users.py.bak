from logging import debug
from typing import Optional
from fastapi import Depends, APIRouter, HTTPException
from odmantic import AIOEngine
from httpx import AsyncClient
from cgi import parse_header

from .models.translate_users_response import TranslateUsersResponse
from .models.translate_users_request import TranslateUsersRequest
from .utils.request import get_idp_credentials, get_odm_session, get_username
from .utils.https import get_https_certificates
from .depends import CheckScope
from .models.idp_domain_config import IdpDomainConfig
from .models.credentials import Credentials

api = APIRouter()


@api.post('/translate_users', dependencies=[Depends(CheckScope('auth'))])
async def translate_users(
    users_request: TranslateUsersRequest,
    database: AIOEngine = Depends(get_odm_session),
    idp_credentials: Credentials = Depends(get_idp_credentials),
    username: str = Depends(get_username),
):
    user_ids = users_request.user_ids
    if user_ids:
        headers = {'content-type': 'application/json'}
        idp_config_list = await IdpDomainConfig.get(database, username)
        if idp_config_list:
            # type hint for syntax highlighting
            idp_config: Optional[IdpDomainConfig] = None
            async for idp_config in idp_config_list:
                if (
                    idp_config and
                    idp_config.endpoints and
                    idp_config.endpoints.translate_users_endpoint
                ):
                    client_certificates = await get_https_certificates(
                        idp_config.endpoints.translate_users_endpoint,
                        idp_config
                    )
                    async with AsyncClient(cert=client_certificates) as client:
                        data_json: dict = {
                            'username': idp_credentials.username,
                            'password': idp_credentials.password,
                            'user_ids': user_ids
                        }
                        translate_users_response = await client.post(
                            idp_config.endpoints.translate_users_endpoint,
                            data=data_json,
                            headers=headers
                        )

                    def get_content_type(response):
                        content_type = response.headers.get('Content-Type')
                        if content_type:
                            content_type, _ = parse_header(content_type)
                            return content_type
                        return None

                    if (
                        translate_users_response.status_code == 200 and
                        get_content_type(
                            translate_users_response) == 'application/json'
                    ):
                        response_json = translate_users_response.json()
                        debug(response_json)
                        if response_json.get('users'):
                            if isinstance(
                                response_json.get('users'), list
                            ):
                                return TranslateUsersResponse(
                                    users=response_json.get('users')
                                )
                            elif isinstance(
                                response_json.get('users'), dict
                            ):
                                debug(response_json.get('users').values())
                                return TranslateUsersResponse(
                                    users=list(
                                        response_json.get('users').values())
                                )
                            else:
                                return TranslateUsersResponse(
                                    users=[response_json.get('users')]
                                )
                        return response_json
        raise HTTPException(
            status_code=404, detail='No idp endpoint found')
    raise HTTPException(
        status_code=400, detail='the following keys are null: user_ids')
