apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: redis
spec:
  selector:
    matchLabels:
      app: "redis"
  # headless service that gives network identity to the RMQ nodes, and enables them to cluster
  serviceName: redis-headless
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      namespace: redis
    spec:
      storageClassName: standard
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "3Gi"
  template:
    metadata:
      name: redis
      namespace: redis
      labels:
        app: redis
    spec:
      initContainers:
      # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
      # the file must be mounted as read-write. We use init containers to copy from the config map read-only
      # path, to a read-write path
      - name: "redis-config"
        image: redis:7.0.0-alpine
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: master-pass
              optional: false
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: redis-config-rw
          mountPath: /etc/redis/
        - name: redis-config
          mountPath: /tmp/redis/
        command:
        - sh
        - -c
        - |
          cp /tmp/redis/redis.conf /etc/redis/redis.conf

          echo "finding master..."
          MASTER_FDQN=`hostname  -f | sed -e 's/redis-[0-9]\./redis-0./'`
          if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
            echo "master not found, defaulting to redis-0"
            if [ "$(hostname)" == "redis-0" ]; then
              echo "this is redis-0, not updating config..."
            else
              echo "updating redis.conf..."
              echo "slaveof $MASTER_FDQN 6379" >> /etc/redis/redis.conf
            fi
          else
            echo "sentinel found, finding master"
            MASTER="$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')"
            echo "master found : $MASTER, updating redis.conf"
            echo "slaveof $MASTER 6379" >> /etc/redis/redis.conf
          fi
          echo "requirepass $REDIS_PASSWORD" >> /etc/redis/redis.conf
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-config-rw
        emptyDir: {}
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
      containers:
      - name: redis
        image: redis:7.0.0-alpine
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config-rw
          mountPath: /etc/redis/
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          readOnlyRootFilesystem: true
      - name: redis-commander
        image: ghcr.io/joeferner/redis-commander
        env:
        - name: REDIS_HOST
          value: redis-0.redis-headless.redis.svc.cluster.local
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: master-pass
              optional: false
        ports:
        - name: redis-commander
          containerPort: 8081
  replicas: 3